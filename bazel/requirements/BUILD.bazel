load("//bazel:py_rules.bzl", "py_binary")
load("//bazel/platforms:optional_dependency_groups.bzl", "OPTIONAL_DEPENDENCY_GROUPS")
load("//bazel/requirements:rules.bzl", "generate_requirement_file", "generate_requirement_file_yaml", "sync_target")
load("//snowflake/ml:version.bzl", "VERSION")

package(default_visibility = ["//visibility:public"])

exports_files(["requirements.schema.json"])

py_binary(
    name = "parse_and_generate_requirements",
    srcs = ["parse_and_generate_requirements.py"],
)

py_binary(
    name = "update_version_requirements",
    srcs = ["update_version_requirements.py"],
    data = ["//:requirements.yml"],
)

py_binary(
    name = "update_bazelrc",
    srcs = ["update_bazelrc.py"],
)

_SRC_REQUIREMENT_FILE = "//:requirements.yml"

_CURRENT_PATH = "bazel/requirements"

_SYNC_RULE_NAME = "sync_requirements"

_SYNC_BAZEL_CMD = "bazel run --config=pre_build //{current_path}:{sync_rule}".format(
    current_path = _CURRENT_PATH,
    sync_rule = _SYNC_RULE_NAME,
)

_GENERATED_REQUIREMENTS_FILES = {
    k: v
    for d in [
        {
            "conda_env_all_yml": {
                "cmd": "--mode dev_version --format conda_env",
                "generated": "conda-env-all.yml",
                "target": "//bazel/environments:conda-env-all.yml",
            },
            "conda_env_build_test_yml": {
                "cmd": "--mode dev_version --format conda_env --filter_by_tag build_test_env",
                "generated": "conda-env-build-test.yml",
                "target": "//bazel/environments:conda-env-build-test.yml",
            },
            "conda_env_build_yml": {
                "cmd": "--mode dev_version --format conda_env --filter_by_tag build_essential",
                "generated": "conda-env-build.yml",
                "target": "//bazel/environments:conda-env-build.yml",
            },
            "conda_env_core_yml": {
                "cmd": "--mode dev_version --format conda_env --filter_by_extras no_extras",
                "generated": "conda-env-core.yml",
                "target": "//bazel/environments:conda-env-core.yml",
            },
            "conda_meta": {
                "cmd": "--mode version_requirements --format conda_meta --version " + VERSION,
                "generated": "meta.yaml",
                "target": "//ci/conda_recipe:meta.yaml",
            },
            "requirements_core_txt": {
                "cmd": "--mode dev_version --format text --filter_by_extras none",
                "generated": "requirements_core.txt",
                "target": "//bazel/environments:requirements_core.txt",
            },
        },
        {
            "conda_env_{}.yml".format(name): {
                "cmd": "--mode dev_version --format conda_env --filter_by_extras {}".format(",".join(extras)),
                "generated": "conda-env-{}.yml".format(name),
                "target": "//bazel/environments:conda-env-{}.yml".format(name),
            }
            for name, extras in OPTIONAL_DEPENDENCY_GROUPS.items()
        },
        {
            "conda_optional_dependency_{}.yml".format(name): {
                "cmd": "--mode version_requirements --format conda_env --filter_by_extras {}".format(
                    ",".join(extras),
                ),
                "generated": "conda-optional-dependency-{}.yml".format(name),
                "target": "//bazel/environments:conda-optional-dependency-{}.yml".format(name),
            }
            for name, extras in OPTIONAL_DEPENDENCY_GROUPS.items()
        },
        {
            "requirements_{}.txt".format(name): {
                "cmd": "--mode dev_version --format text --filter_by_extras {}".format(",".join(extras)),
                "generated": "requirements-{}.in".format(name),
                "target": "//bazel/environments:requirements_{}.txt".format(name),
            }
            for name, extras in OPTIONAL_DEPENDENCY_GROUPS.items()
        },
        {
            "snowml_inference_alternative_requirements": {
                "cmd": "--mode version_requirements --format python",
                "generated": "_snowml_inference_alternative_requirements.py",
                "target": "//snowflake/ml/model/_packager/model_runtime:_snowml_inference_alternative_requirements.py",
            },
        },
        {
            "snowml_requirements_test_util": {
                "cmd": "--mode version_requirements --format python",
                "generated": "_snowml_requirements.py",
                "target": "//tests/integ/snowflake/ml/test_utils:_snowml_requirements.py",
            },
        },
    ]
    for k, v in d.items()
}

[
    generate_requirement_file(
        name = name,
        cmd = value["cmd"],
        generated_file = value["generated"],
        generation_cmd = _SYNC_BAZEL_CMD,
        src_requirement_file = _SRC_REQUIREMENT_FILE,
        target = value["target"],
    )
    for name, value in _GENERATED_REQUIREMENTS_FILES.items()
    if name != "conda_meta"
]

# Generate ci/conda_recipe/meta.yaml
generate_requirement_file_yaml(
    name = "conda_meta",
    cmd = _GENERATED_REQUIREMENTS_FILES["conda_meta"]["cmd"],
    generated_file = _GENERATED_REQUIREMENTS_FILES["conda_meta"]["generated"],
    generation_cmd = _SYNC_BAZEL_CMD,
    src_requirement_file = _SRC_REQUIREMENT_FILE,
    target = _GENERATED_REQUIREMENTS_FILES["conda_meta"]["target"],
    template_file = "//bazel/requirements/templates:meta.tpl.yaml",
)

# Generate the updater script so there's only one target for devs to run,
# even if many generated files are in the source folder.
sync_target(
    name = _SYNC_RULE_NAME,
    root_path = _CURRENT_PATH,
    src_requirement_file = _SRC_REQUIREMENT_FILE,
    targets = _GENERATED_REQUIREMENTS_FILES.values(),
)

sh_test(
    name = "changelog_version_check",
    srcs = ["changelog_version_check.sh"],
    args = [
        VERSION,
        "$(location //:CHANGELOG.md)",
    ],
    data = ["//:CHANGELOG.md"],
)

[pytest]
markers =
; This mark should be set on any test case against codes that require the exact same dependency
; version in the local environment and in the Snowpark Python Sandbox, which makes it impossible
; to run in a Python environment installed using PIP, since there is no way to let PIP get
; knowledge of the versions available in Snowflake Anaconda Channel.
;
; For example, the XGBClassifier in modeling requires the exact same XGBoost version in local
; environment and in the warehouse. XGBoost is specified as a dependency of snowflake-ml-python
; with version requirements ">=1.7.3,<2". In this range, only 1.7.3 is available in Snowflake
; Anaconda Channel, while there are other versions like 1.7.5. Those version would be installed
; when users run `pip install snowflake-ml-python` if they choose to use pip. Thus the modeling
; model will fail to work as it cannot ensure the correctness of the result given different
; versions of library.
;
; There is no way to automatically specify the version that will work without conda, which makes
; test unmaintainable. Also user experience would be bad in such case. Thus, features that
; require the exact the same version, should be stated as pip incompatible, and any tests
; against those features, should be labeled using this mark, so that they will be excluded during
; the SnowML Build & Test pipeline. They will still be tested in conda environment.
    pip_incompatible: mark a test as incompatible with pip environment.
    conda_incompatible: mark a test as incompatible with conda environment.
    spcs_deployment_image: mark a test as requiring the SPCS deployment image.
    feature_area_model_registry: mark a test as belonging to the model registry feature area.
    feature_area_feature_store: mark a test as belonging to the feature store feature area.
    feature_area_jobs: mark a test as belonging to the jobs feature area.
    feature_area_observability: mark a test as belonging to the observability feature area.
    feature_area_cortex: mark a test as belonging to the cortex feature area.
    feature_area_core: mark a test as belonging to the core feature area.
    feature_area_modeling: mark a test as belonging to the modeling feature area.
    feature_area_model_serving: mark a test as belonging to the model serving feature area.
    feature_area_data: mark a test as belonging to the data feature area.
    feature_area_none: mark a test as not belonging to any specific feature area.
